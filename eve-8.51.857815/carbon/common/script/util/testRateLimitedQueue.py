#Embedded file name: carbon/common/script/util\testRateLimitedQueue.py
import sys
import random
import unittest
from rateLimitedQueue import RateLimitedQueue

class TestRateLimitedQueue(unittest.TestCase):
    """
    Tester for RateLimitedQueue. Functional correctness and performance tests.
    Standard unittest, not dependent on Blue/ExeFile.
    """

    def testFunctionality(self):
        """ Small-scale functional/behavioral correctness test """
        numComplete = 0
        q = RateLimitedQueue(maxReadyItems=3, maxQueuedItems=2, maxCompleteItems=4, numCompleteFunc=lambda : numComplete)
        state = q.Enqueue(1)
        self.assertEqual(state, RateLimitedQueue.READY)
        self.assertEqual(state, q.State(1))
        self.assertEqual(q.State(2), RateLimitedQueue.NONE)
        self.assertIsNone(q.QueuePosition(1))
        self.assertIsNone(q.QueuePosition(2))
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 1)
        self.assertEqual(q.NumComplete(), 0)
        state = q.Enqueue(2)
        self.assertEqual(state, RateLimitedQueue.READY)
        self.assertEqual(state, q.State(2))
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 2)
        self.assertEqual(q.NumComplete(), 0)
        prevQTime = q.queueMap[2].firstTime
        state = q.Enqueue(2)
        self.assertEqual(state, RateLimitedQueue.READY)
        self.assertEqual(prevQTime, q.queueMap[2].firstTime)
        self.assertEqual(state, q.State(2))
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 2)
        self.assertEqual(q.NumComplete(), 0)
        state = q.Enqueue(3)
        self.assertEqual(state, RateLimitedQueue.READY)
        self.assertEqual(state, q.State(3))
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.NumComplete(), 0)
        state = q.Enqueue(4)
        self.assertEqual(state, RateLimitedQueue.QUEUED)
        self.assertEqual(state, q.State(4))
        self.assertIsNone(q.QueuePosition(3))
        pos = q.QueuePosition(4)
        self.assertIsNotNone(pos)
        self.assertEqual(pos[0], 0)
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.GetQueue(), [4])
        self.assertEqual(q.GetReadySet(), {1, 2, 3})
        self.assertEqual(q.NumComplete(), 0)
        prevQTime = q.queueMap[4].firstTime
        self.assertIsNone(q.Complete(4))
        prevQTime = q.queueMap[4].firstTime
        self.assertIsNotNone(q.Complete(2))
        numComplete += 1
        self.assertEqual(q.State(1), RateLimitedQueue.READY)
        self.assertEqual(q.State(2), RateLimitedQueue.NONE)
        self.assertEqual(q.State(3), RateLimitedQueue.READY)
        self.assertEqual(q.State(4), RateLimitedQueue.READY)
        self.assertIsNone(q.QueuePosition(1))
        self.assertIsNone(q.QueuePosition(2))
        self.assertIsNone(q.QueuePosition(3))
        self.assertIsNone(q.QueuePosition(4))
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.GetQueue(), [])
        self.assertEqual(q.GetReadySet(), {1, 3, 4})
        self.assertEqual(q.Enqueue(5), RateLimitedQueue.QUEUED)
        self.assertEqual(q.Enqueue(6), RateLimitedQueue.QUEUED)
        self.assertEqual(q.NumQueued(), 2)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.GetQueue(), [5, 6])
        self.assertEqual(q.QueuePosition(5)[0], 0)
        self.assertGreater(q.QueuePosition(6)[0], 0)
        self.assertEqual(q.GetReadySet(), {1, 3, 4})
        self.assertEqual(q.NumComplete(), 1)
        self.assertEqual(q.State(5), RateLimitedQueue.QUEUED)
        self.assertTrue(q.Remove(5))
        self.assertEqual(q.State(5), RateLimitedQueue.NONE)
        self.assertEqual(q.State(6), RateLimitedQueue.QUEUED)
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.GetQueue(), [6])
        self.assertEqual(q.GetReadySet(), {1, 3, 4})
        self.assertEqual(q.NumComplete(), 1)
        self.assertEqual(q.Enqueue(7), RateLimitedQueue.QUEUED)
        self.assertEqual(q.GetQueue(), [6, 7])
        self.assertEqual(q.QueuePosition(6)[0], 0)
        self.assertGreater(q.QueuePosition(7)[0], 0)
        self.assertEqual(q.GetReadySet(), {1, 3, 4})
        self.assertIsNone(q.Enqueue(8))
        self.assertEqual(q.GetQueue(), [6, 7])
        self.assertEqual(q.GetReadySet(), {1, 3, 4})
        self.assertTrue(q.Remove(1))
        self.assertEqual(q.State(1), RateLimitedQueue.NONE)
        self.assertEqual(q.State(6), RateLimitedQueue.READY)
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.NumComplete(), 1)
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {3, 4, 6})
        self.assertEqual(q.Enqueue(100, bypassQueue=True), RateLimitedQueue.READY)
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {3,
         4,
         6,
         100})
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 4)
        self.assertTrue(q.Complete(100))
        numComplete += 1
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {3, 4, 6})
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 3)
        self.assertEqual(q.NumComplete(), 2)
        self.assertTrue(q.Complete(3))
        numComplete += 1
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {4, 6})
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 2)
        self.assertEqual(q.NumComplete(), 3)
        self.assertTrue(q.Complete(4))
        numComplete += 1
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {6})
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 1)
        self.assertEqual(q.NumComplete(), 4)
        self.assertFalse(q.Complete(6))
        self.assertEqual(q.GetQueue(), [7])
        self.assertEqual(q.GetReadySet(), {6})
        self.assertEqual(q.NumQueued(), 1)
        self.assertEqual(q.NumReady(), 1)
        self.assertEqual(q.NumComplete(), 4)
        numComplete -= 2
        q.MakeReady()
        self.assertEqual(q.GetQueue(), [])
        self.assertEqual(q.GetReadySet(), {6, 7})
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 2)
        self.assertEqual(q.NumComplete(), 2)
        numComplete -= 1
        self.assertEqual(q.NumComplete(), 1)
        self.assertEqual(q.Process(8), RateLimitedQueue.COMPLETE)
        numComplete += 1
        self.assertEqual(q.GetQueue(), [])
        self.assertEqual(q.GetReadySet(), {6, 7})
        self.assertEqual(q.NumComplete(), 2)
        self.assertEqual(q.Process(9), RateLimitedQueue.QUEUED)
        self.assertEqual(q.GetQueue(), [9])
        self.assertEqual(q.GetReadySet(), {6, 7})
        self.assertEqual(q.NumComplete(), 2)
        bla = 0
        for i in xrange(0, 1000000):
            bla += 1

        q.maxQueuedItems = sys.maxint
        self.assertEqual(q.Enqueue(10), RateLimitedQueue.QUEUED)
        self.assertEqual(q.Enqueue(11), RateLimitedQueue.QUEUED)
        self.assertEqual(q.GetQueue(), [9, 10, 11])
        self.assertEqual(q.GetReadySet(), {6, 7})
        timeout = q.QueuePosition(10)[1] + 0.01
        to = q.Timeout(timeout)
        self.assertEqual(q.GetQueue(), [])
        self.assertEqual(q.GetReadySet(), {10, 11})
        self.assertEqual(q.NumQueued(), 0)
        self.assertEqual(q.NumReady(), 2)
        self.assertEqual(q.NumComplete(), 2)
        q.maxCompleteItems = sys.maxint
        self.assertEqual(q.Enqueue(12), RateLimitedQueue.READY)
        self.assertEqual(q.Enqueue(13), RateLimitedQueue.QUEUED)
        self.assertEqual(q.Enqueue(14), RateLimitedQueue.QUEUED)
        self.assertEqual(q.Enqueue(15), RateLimitedQueue.QUEUED)
        self.assertEqual(q.GetQueue(), [13, 14, 15])
        q.Remove(14)
        q.Remove(13)
        self.assertEqual(q.GetQueue(), [15])
        self.assertEqual(q.queue[0], 15)
        self.assertEqual(q.GetReadySet(), {10, 11, 12})
        self.assertEqual(q.Enqueue(10, bypassQueue=True), RateLimitedQueue.READY)
        self.assertEqual(q.GetReadySet(), {10, 11, 12})
        self.assertEqual(q.GetQueue(), [15])
        self.assertEqual(q.Enqueue(15, bypassQueue=True), RateLimitedQueue.READY)
        self.assertEqual(q.GetQueue(), [])
        self.assertEqual(q.GetReadySet(), {10,
         11,
         12,
         15})

    def testRateControl(self):
        """Higher throughput rate control test"""
        self.enqCounter = self.compCounter = 0

        def DoEnqueue(q, count):
            for x in xrange(0, count):
                self.assertIsNotNone(q.Enqueue(self.enqCounter))
                self.enqCounter += 1

        def DoComplete(q, count):
            for x in xrange(0, count):
                self.assertIsNotNone(q.Complete(self.compCounter))
                self.compCounter += 1

        q = RateLimitedQueue(maxReadyItems=1000, maxReadyRate=100)
        DoEnqueue(q, 50)
        self.assertEquals(q.NumReady(), 50)
        DoEnqueue(q, 70)
        self.assertEquals(q.NumReady(), 100)
        self.assertEquals(q.NumQueued(), 20)
        q.Tick()
        self.assertEquals(q.NumReady(), 120)
        DoEnqueue(q, 80)
        self.assertEquals(q.NumReady(), 200)
        self.assertEquals(q.NumQueued(), 0)
        q.Tick()
        DoEnqueue(q, 500)
        self.assertEquals(q.NumReady(), 300)
        self.assertEquals(q.NumQueued(), 400)
        q.Tick()
        self.assertEquals(q.NumReady(), 400)
        self.assertEquals(q.NumQueued(), 300)
        q.Tick()
        q.Tick()
        self.assertEquals(q.NumReady(), 600)
        self.assertEquals(q.NumQueued(), 100)
        DoEnqueue(q, 500)
        q.Tick()
        self.assertEquals(q.NumReady(), 700)
        self.assertEquals(q.NumQueued(), 500)
        q.Tick()
        q.Tick()
        q.Tick()
        self.assertEquals(q.NumReady(), 1000)
        self.assertEquals(q.NumQueued(), 200)
        q.Tick()
        self.assertEquals(q.NumReady(), 1000)
        self.assertEquals(q.NumQueued(), 200)
        DoComplete(q, 500)
        self.assertEquals(q.NumReady(), 600)
        self.assertEquals(q.NumQueued(), 100)
        q.Tick()
        self.assertEquals(q.NumReady(), 700)
        self.assertEquals(q.NumQueued(), 0)
        self.enqCounter = self.compCounter = 0
        q = RateLimitedQueue(maxReadyItems=100, maxReadyGrowth=50)
        DoEnqueue(q, 500)
        self.assertEquals(q.NumReady(), 100)
        self.assertEquals(q.NumQueued(), 400)
        q.Tick()
        self.assertEquals(q.NumReady(), 150)
        self.assertEquals(q.NumQueued(), 350)
        q.Tick()
        self.assertEquals(q.NumReady(), 200)
        self.assertEquals(q.NumQueued(), 300)
        q.Tick()
        self.assertEquals(q.NumReady(), 250)
        self.assertEquals(q.NumQueued(), 250)
        q.Tick()
        self.assertEquals(q.NumReady(), 300)
        self.assertEquals(q.NumQueued(), 200)
        q.Tick()
        self.assertEquals(q.NumReady(), 350)
        self.assertEquals(q.NumQueued(), 150)
        DoComplete(q, 200)
        self.assertEquals(q.NumReady(), 300)
        self.assertEquals(q.NumQueued(), 0)
        q.Tick()
        self.assertEquals(q.maxReadyBoost, 200)
        self.assertEquals(q.NumReady(), 300)
        self.assertEquals(q.NumQueued(), 0)
        DoComplete(q, 250)
        self.assertEquals(q.NumReady(), 50)
        q.Tick()
        self.assertEquals(q.maxReadyBoost, 0)
        DoEnqueue(q, 200)
        self.assertEquals(q.NumReady(), 100)
        self.assertEquals(q.NumQueued(), 150)
        q.Tick()
        self.assertEquals(q.maxReadyBoost, 50)
        q = RateLimitedQueue(maxReadyItems=1000)
        self.enqCounter = self.compCounter = 0
        DoEnqueue(q, 1000000)
        while q.NumQueued() > 0:
            q.Tick()
            DoComplete(q, min(q.NumReady(), random.randint(1, 1000)))

        DoComplete(q, q.NumReady())
        self.assertEquals(q.NumComplete(), 1000000)


if __name__ == '__main__':
    unittest.main()
